{
  "$schema":"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion":"1.0.0.0",
  "parameters":{
    "domainNameSuffix":{
      "type":"string",
      "metadata":{
        "description":"Suffix for Public IPs"
      }
    },
    "hcUsername":{
      "type":"string",
      "metadata":{
        "description":"Username for the Ansible Control Virtual Machine and provisoning"
      },
      "defaultValue":"pr35745h0p"
    },
    "authenticationType": {
      "type": "string",
      "allowedValues": [
        "password",
        "sshPublicKey"
      ]
    },
    "hcPassword": {
      "type": "securestring",
      "defaultValue": "", 
      "metadata": {
        "description": "Password for the Virtual Machine. Not used if authenticationType of sshPublicKey."
      }
    },
    "sshKeyData":{
      "type":"string",
      "metadata":{
        "description":"SSH RSA public key file as a string. Not used if authenticationType of password."
      }
    },
    "ubuntuOSVersion":{
      "type":"string",
      "defaultValue":"16.04.0-LTS",
      "allowedValues":[
        "16.04.0-LTS",
        "14.04.4-LTS"
      ],
      "metadata":{
        "description":"The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version. Allowed values:14.04.4-LTS, 16.04.0-LTS ."
      }
    },
    "frVmSize":{
      "type":"string",
      "defaultValue":"Standard_A3",
      "metadata":{
        "description":"Instance size for Web Front VMs"
      }
    },
    "numberOfFront":{
      "type":"int",
      "defaultValue":2,
      "metadata":{
        "description":"Number of Front nodes to create >=2"
      }
    },
    "backVmSize":{
      "type":"string",
      "defaultValue":"Standard_A3",
      "metadata":{
        "description":"Instance size for Web Front VMs Minimum Standard_A0"
      }
    },
    "numberOfBack":{
      "type":"int",
      "defaultValue":2,
      "metadata":{
        "description":"Number of Back nodes to create >=2"
      }
    },
    "frStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_RAGRS",
        "Standard_GRS"
      ],
      "metadata":{
        "description":"Storage Account type for Front VMs"
      }
    },
    "bkStorageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_RAGRS",
        "Standard_GRS"
      ],
      "metadata":{
        "description":"Storage Account type for Back VMs"
      }
    },
    "tshirtSize": {
      "type": "string",
      "defaultValue": "Small",
      "allowedValues": [
        "Small",
        "Medium",
        "Large"
      ],
      "metadata": {
        "description": "T-shirt size of the PrestaShop cluster"
      }
    },
    "prestashop_firstname":{
      "type":"string",
      "metadata":{
        "description":"Prestatshop Admin Firstname"
      }
    },
    "prestashop_lastname":{
      "type":"string",
      "metadata":{
        "description":"Prestatshop Admin Lastname"
      }
    },
    "prestashop_email":{
      "type":"string",
      "metadata":{
        "description":"Prestatshop Admin email"
      }
    },
    "prestashop_password":{
      "type":"securestring",
      "metadata":{
        "description":"Prestatshop Admin Password"
      }
    },
    "templatesBaseURL":{
      "type":"string",
      "metadata": {
        "description":"Base template URL for nested template"
      },
      "defaultValue": "https://raw.githubusercontent.com/herveleclerc/arm-lamp/master/nested/"
    }
  }, 
  "variables":{
    "configuration":{
      "frontTemplateURL":"[concat(parameters('templatesBaseURL'),'/front.json')]",
      "backTemplateURL":"[concat(parameters('templatesBaseURL'),'/back.json')]"
    },
    "frFaultDomainCount":"3",
    "frUpdateDomainCount":"5",
    "bkFaultDomainCount":"3",
    "bkUpdateDomainCount":"5",
    "dnsNameForAnsiblePublicIP":"[concat('hc-',parameters('domainNameSuffix'),uniquestring(resourceGroup().id, deployment().name))]",
    "dnsserver":"8.8.8.8",
    "location":"[resourceGroup().location]",
    "imagePublisher":"Canonical",
    "imageOffer":"UbuntuServer",
    "hcOSDiskName":"hcosdisk",
    "keyStorageAccountName":"[concat('key', uniquestring(resourceGroup().id, deployment().name))]",
    "keyStorageAccountType":"Standard_LRS",
    "hcNicName":"hcVnic",
    "virtualNetworkName":"[concat('vNet', resourceGroup().name)]",
    "vnetID":"[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "addressPrefix":"10.0.0.0/16",
    "subnetCIDR":".0/24",
    "hcSubnetRoot":"10.0.0",
    "frSubnetRoot":"10.0.2",
    "bkSubnetRoot":"10.0.4",
    "hcSubnetName":"hcSubnet",
    "hcSubnetPrefix":"[concat(variables('hcSubnetRoot'),variables('subnetCIDR'))]",
    "frSubnetName":"frSubnet",
    "frSubnetPrefix":"[concat(variables('frSubnetRoot'),variables('subnetCIDR'))]",
    "bkSubnetName":"bkSubnet",
    "bkSubnetPrefix":"[concat(variables('bkSubnetRoot'),variables('subnetCIDR'))]",
    "assetsStorageAccountId":"[resourceId(variables('keyStorageAccountName'),'Microsoft.Storage/storageAccounts', variables('keyStorageAccountName'))]",
    "hcStorageAccountName":"[concat('hc', uniquestring(resourceGroup().id, deployment().name) )]",
    "dnsNameForFrontPublicIP":"[concat('lb-',parameters('domainNameSuffix'),uniquestring(resourceGroup().id, deployment().name))]",
    "hcStorageAccountType":"Standard_LRS",
    "frStorageAccountName":"[concat('fr', uniquestring(resourceGroup().id, deployment().name))]",
    "bkStorageAccountName":"[concat('bk', uniquestring(resourceGroup().id, deployment().name))]",
    "frAvailabilitySetName":"[concat('frav', resourceGroup().name)]",
    "bkAvailabilitySetName":"[concat('bkav', resourceGroup().name)]",
    "hcPublicIPAddressName":"hcPublicIP",
    "hcPublicIPAddressType":"Dynamic",
    "hcVmStorageAccountContainerName":"vhds",
    "hcVmName":"[concat('ans', resourceGroup().name)]",
    "frVmName":"[concat('web', resourceGroup().name)]",
    "bkVmName":"[concat('bdd', resourceGroup().name)]",
    "hcSubnetRef":"[concat(variables('vnetID'),'/subnets/',variables('hcSubnetName'))]",
    "hcVmSize":"Basic_A0",
    "hcNetworkSecurityGroupName":"hcSecurityGroup",
    "frNetworkSecurityGroupName":"frSecurityGroup",
    "bkNetworkSecurityGroupName":"bkSecurityGroup",
    "sshKeyPath":"[concat('/home/',parameters('hcUsername'),'/.ssh/authorized_keys')]",
    "scriptsBaseUrl":"https://raw.githubusercontent.com/herveleclerc/arm-lamp/master/scripts/",
    "ansiblePlaybookLocation":"deploy-prestashop.yml",
    "ansibleRolesReqLocation":"install_roles.yml",
    "ansibleVarsLocation":"vars/main.yml",
    "ansibleVarsMasterLocation":"vars/master.yml",
    "ansibleVarsSlaveLocation":"vars/slave.yml",
    "ansibleVarsDefaultLocation":"vars/mysql_default.yml",
    "customScriptDeployFile":"deploy.sh",
    "customScriptDeployUrl":"[concat(variables('scriptsBaseUrl'),variables('customScriptDeployFile'))]",
    "customScriptAnsibleCommand":"[concat('bash ',variables('customScriptDeployFile'))]",
    "ansiblePlaybookUrl":"[concat(variables('scriptsBaseUrl'),variables('ansiblePlaybookLocation'))]",
    "ansibleRolesReqUrl":"[concat(variables('scriptsBaseUrl'),variables('ansibleRolesReqLocation'))]",
    "ansibleVarsUrl":"[concat(variables('scriptsBaseUrl'),variables('ansibleVarsLocation'))]",
    "ansibleVarsMastersUrl":"[concat(variables('scriptsBaseUrl'),variables('ansibleVarsMasterLocation'))]",
    "ansibleVarsSlavesUrl":"[concat(variables('scriptsBaseUrl'),variables('ansibleVarsSlaveLocation'))]",
    "ansibleVarsDefaultsUrl":"[concat(variables('scriptsBaseUrl'),variables('ansibleVarsDefaultLocation'))]",
    "pythonAzureScriptUrl":"[concat(variables('scriptsBaseUrl'),'WriteSSHToPrivateStorage.py')]",
    "paramsSubnets":"[concat(variables('hcSubnetRoot'),' ',variables('frSubnetRoot'),' ',variables('bkSubnetRoot'),' ')]",
    "paramsNbHosts":"[concat(parameters('numberOfFront'),' ',parameters('numberOfBack'))]",
    "paramsNames":"[concat(variables('hcVmName'),' ',variables('frVmName'),' ',variables('bkVmName'))]",
    "paramsExtra":"[concat(parameters('prestashop_password'),' ',variables('dnsNameForFrontPublicIP'),'.',variables('location'))]",
    "paramsAdmin":"[concat(parameters('prestashop_firstname'),' ',parameters('prestashop_lastname'),'.',parameters('prestashop_email'))]",
    "paramsDeploy":"[concat(parameters('hcUsername'),' ',variables('paramsSubnets'),' ',variables('paramsNbHosts'),' ',variables('paramsNames'),' ',variables('paramsExtra'),' ',variables('paramsAdmin'))]",
    "apiVersion":{
      "resources":{
        "deployments":"2015-01-01"
      },
      "network":"2015-05-01-preview",
      "storage":"2015-05-01-preview",
      "compute":"2015-06-15",
      "deployment":"2016-02-01"
    },
    "osProfile_hc_password": {
      "computerName": "[variables('hcVmName')]",
      "adminUsername": "[parameters('hcUsername')]",
      "adminPassword": "[parameters('hcPassword')]"
    },
    "osProfile_hc_sshPublicKey": {
      "computerName": "[variables('hcVmName')]",
      "adminUsername": "[parameters('hcUsername')]",
      "linuxConfiguration": {
        "disablePasswordAuthentication": "true",
        "ssh": {
          "publicKeys": [
            {
              "path":"[variables('sshKeyPath')]",
              "keyData":"[parameters('sshKeyData')]"
            }
          ]
        }
      }
    }
  },
  "resources":[
    {
      "name":"FrontDeployment",
      "type":"Microsoft.Resources/deployments",
      "apiVersion":"[variables('apiVersion').deployment]",
      "dependsOn":[
        "[concat('Microsoft.Storage/storageAccounts/', toLower(variables('keyStorageAccountName')))]",
        "[concat('Microsoft.Network/networkSecurityGroups/',variables('frNetworkSecurityGroupName'))]",
        "[concat('Microsoft.Network/virtualNetworks/',variables('virtualNetworkName'))]"
      ],
      "properties":{
        "mode":"Incremental",
        "templateLink":{
          "uri":"[variables('configuration').frontTemplateURL]",
          "contentVersion":"1.0.0.0"
        },
        "parameters":{
          "adminUserName":{
            "value":"[parameters('hcUsername')]"
          },
          "sshKeyData":{
            "value":"[parameters('sshKeyData')]"
          },
          "ubuntuOSVersion":{
            "value":"[parameters('ubuntuOSVersion')]"
          },
          "frVmSize":{
            "value":"[parameters('frVmSize')]"
          },
          "numberOfFront":{
            "value":"[parameters('numberOfFront')]"
          },
          "frAvailabilitySetName":{
            "value":"[variables('frAvailabilitySetName')]"
          },
          "frStorageAccountName":{
            "value":"[variables('frStorageAccountName')]"
          },
          "frStorageAccountType":{
            "value":"[parameters('frStorageAccountType')]"
          },
          "subnetCIDR":{
            "value":"[variables('subnetCIDR')]"
          },
          "frSubnetRoot":{
            "value":"[variables('frSubnetRoot')]"
          },
          "frSubnetName":{
            "value":"[variables('frSubnetName')]"
          },
          "frSubnetPrefix":{
            "value":"[variables('frSubnetPrefix')]"
          },
          "vnetID":{
            "value":"[variables('vnetID')]"
          },
          "frVmName":{
            "value":"[variables('frVmName')]"
          },
          "dnsNameForFrontPublicIP": {
             "value":"[variables('dnsNameForFrontPublicIP')]"
          },
          "tshirtSize":{
            "value":"[parameters('tshirtSize')]"
          },
          "keyStorageAccountName":{
            "value":"[variables('keyStorageAccountName')]"
          }
        }
      }
    },
    {
      "name":"BackDeployment",
      "type":"Microsoft.Resources/deployments",
      "apiVersion":"[variables('apiVersion').deployment]",
      "dependsOn":[
        "[concat('Microsoft.Storage/storageAccounts/', toLower(variables('keyStorageAccountName')))]",
        "[concat('Microsoft.Network/networkSecurityGroups/',variables('bkNetworkSecurityGroupName'))]",
        "[concat('Microsoft.Network/virtualNetworks/',variables('virtualNetworkName'))]"
      ],
      "properties":{
        "mode":"Incremental",
        "templateLink":{
          "uri":"[variables('configuration').backTemplateURL]",
          "contentVersion":"1.0.0.0"
        },
        "parameters":{
          "adminUserName":{
            "value":"[parameters('hcUsername')]"
          },
          "sshKeyData":{
            "value":"[parameters('sshKeyData')]"
          },
          "ubuntuOSVersion":{
            "value":"[parameters('ubuntuOSVersion')]"
          },
          "bkVmSize":{
            "value":"[parameters('frVmSize')]"
          },
          "numberOfBack":{
            "value":"[parameters('numberOfFront')]"
          },
          "bkAvailabilitySetName":{
            "value":"[variables('bkAvailabilitySetName')]"
          },
          "bkStorageAccountName":{
            "value":"[variables('bkStorageAccountName')]"
          },
          "bkStorageAccountType":{
            "value":"[parameters('bkStorageAccountType')]"
          },
          "subnetCIDR":{
            "value":"[variables('subnetCIDR')]"
          },
          "bkSubnetRoot":{
            "value":"[variables('bkSubnetRoot')]"
          },
          "bkSubnetName":{
            "value":"[variables('bkSubnetName')]"
          },
          "bkSubnetPrefix":{
            "value":"[variables('bkSubnetPrefix')]"
          },
          "vnetID":{
            "value":"[variables('vnetID')]"
          },
          "bkVmName":{
            "value":"[variables('bkVmName')]"
          },
          "tshirtSize":{
            "value":"[parameters('tshirtSize')]"
          },
          "keyStorageAccountName":{
            "value":"[variables('keyStorageAccountName')]"
          }
        }
      }
    },
    {
      "comments":"Availability Set for Front VMs",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('frAvailabilitySetName')]",
      "apiVersion": "[variables('apiVersion').network]",
      "location": "[resourceGroup().location]",
      "properties": {
        "PlatformFaultDomainCount": "[variables('frFaultDomainCount')]",
        "PlatformUpdateDomainCount": "[variables('frUpdateDomainCount')]"
      }
    },
    {
      "comments":"Availability Set for Back VMs",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('bkAvailabilitySetName')]",
      "apiVersion": "[variables('apiVersion').network]",
      "location": "[resourceGroup().location]",
      "properties": {
        "PlatformFaultDomainCount": "[variables('bkFaultDomainCount')]",
        "PlatformUpdateDomainCount": "[variables('bkUpdateDomainCount')]"
      }
    },
    {
      "comments":"Network Security Group for Ansible Control VM",
      "apiVersion":"[variables('apiVersion').network]",
      "type":"Microsoft.Network/networkSecurityGroups",
      "name":"[variables('hcNetworkSecurityGroupName')]",
      "location":"[variables('location')]",
      "tags":{
        "displayName":"ANSIBLE-NetworkSecurityGroup"
      },
      "properties":{
        "securityRules":[
          {
            "name":"openbar-in",
            "properties":{
              "protocol":"*",
              "sourcePortRange":"*",
              "destinationPortRange":"*",
              "sourceAddressPrefix":"*",
              "destinationAddressPrefix":"*",
              "access":"Allow",
              "priority":101,
              "direction":"Inbound"
            }
          }
        ]
      }
    },
    {
      "comments":"Network Security Group for front VMs",
      "apiVersion":"[variables('apiVersion').network]",
      "type":"Microsoft.Network/networkSecurityGroups",
      "name":"[variables('frNetworkSecurityGroupName')]",
      "location":"[variables('location')]",
      "tags":{
        "displayName":"FRONT-NetworkSecurityGroup"
      },
      "properties":{
        "securityRules":[
          {
            "name":"http80-in",
            "properties":{
              "protocol":"*",
              "sourcePortRange":"*",
              "destinationPortRange":"*",
              "sourceAddressPrefix":"*",
              "destinationAddressPrefix":"*",
              "access":"Allow",
              "priority":101,
              "direction":"Inbound"
            }
          }
        ]
      }
    },
    {
      "comments":"Network Security Group for Back VMs",
      "apiVersion":"[variables('apiVersion').network]",
      "type":"Microsoft.Network/networkSecurityGroups",
      "name":"[variables('bkNetworkSecurityGroupName')]",
      "location":"[variables('location')]",
      "tags":{
        "displayName":"BACK-NetworkSecurityGroup"
      },
      "properties":{
        "securityRules":[
          {
            "name":"acc-in",
            "properties":{
              "protocol":"*",
              "sourcePortRange":"*",
              "destinationPortRange":"*",
              "sourceAddressPrefix":"*",
              "destinationAddressPrefix":"*",
              "access":"Allow",
              "priority":101,
              "direction":"Inbound"
            }
          }
        ]
      }
    },
    {
      "comments":"Global Storage Account for the Stack",
      "type":"Microsoft.Storage/storageAccounts",
      "name":"[toLower(variables('hcStorageAccountName'))]",
      "apiVersion":"[variables('apiVersion').storage]",
      "location":"[variables('location')]",
      "properties":{
        "accountType":"[variables('hcStorageAccountType')]"
      }
    },
    {
      "comments":"Storage Account for Generated SSH keys or secrets",
      "type":"Microsoft.Storage/storageAccounts",
      "name":"[toLower(variables('keyStorageAccountName'))]",
      "apiVersion":"[variables('apiVersion').storage]",
      "location":"[variables('location')]",
      "properties":{
        "accountType":"[variables('keyStorageAccountType')]"
      }
    },
    {
      "comments":"Public IP for Ansible Control VM",
      "apiVersion":"[variables('apiVersion').network]",
      "type":"Microsoft.Network/publicIPAddresses",
      "name":"[variables('hcPublicIPAddressName')]",
      "location":"[variables('location')]",
      "properties":{
        "publicIPAllocationMethod":"[variables('hcPublicIPAddressType')]",
        "dnsSettings":{
          "domainNameLabel":"[variables('dnsNameForAnsiblePublicIP')]"
        }
      }
    },
    {
      "comments":"Virtual Network with 3 subnets admin, front, back",
      "apiVersion":"[variables('apiVersion').network]",
      "type":"Microsoft.Network/virtualNetworks",
      "name":"[variables('virtualNetworkName')]",
      "location":"[variables('location')]",
      "dependsOn":[
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('hcNetworkSecurityGroupName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('frNetworkSecurityGroupName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('bkNetworkSecurityGroupName'))]"
      ],
      "properties":{
        "addressSpace":{
          "addressPrefixes":[
            "[variables('addressPrefix')]"
          ]
        },
        "subnets":[
          {
            "name":"[variables('hcSubnetName')]",
            "properties":{
              "addressPrefix":"[variables('hcSubnetPrefix')]",
              "networkSecurityGroup":{
                "id":"[resourceId('Microsoft.Network/networkSecurityGroups', variables('hcNetworkSecurityGroupName'))]"
              }
            }
          },
          {
            "name":"[variables('frSubnetName')]",
            "properties":{
              "addressPrefix":"[variables('frSubnetPrefix')]",
              "networkSecurityGroup":{
                "id":"[resourceId('Microsoft.Network/networkSecurityGroups', variables('frNetworkSecurityGroupName'))]"
              }
            }
          },
          {
            "name":"[variables('bkSubnetName')]",
            "properties":{
              "addressPrefix":"[variables('bkSubnetPrefix')]",
              "networkSecurityGroup":{
                "id":"[resourceId('Microsoft.Network/networkSecurityGroups', variables('bkNetworkSecurityGroupName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "comments":"Interface for Ansible Control VM with a public IP attached",
      "apiVersion":"[variables('apiVersion').network]",
      "type":"Microsoft.Network/networkInterfaces",
      "name":"[variables('hcNicName')]",
      "location":"[variables('location')]",
      "dependsOn":[
        "[concat('Microsoft.Network/publicIPAddresses/', variables('hcPublicIPAddressName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]"
      ],
      "properties":{
        "dnsSettings":{
          "dnsServers": []
        },
        "ipConfigurations":[
          {
            "name":"ipconfig1",
            "properties":{
              "privateIPAllocationMethod":"Dynamic",
              "publicIPAddress":{
                "id":"[resourceId('Microsoft.Network/publicIPAddresses',variables('hcPublicIPAddressName'))]"
              },
              "subnet":{
                "id":"[variables('hcSubnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "comments":"Custom script extension for the Ansible Control VM",
      "type":"Microsoft.Compute/virtualMachines/extensions",
      "name":"[concat(variables('hcVmName'),'/installAnsible')]",
      "apiVersion":"[variables('apiVersion').compute]",
      "location":"[resourceGroup().location]",
      "dependsOn":[
        "[concat('Microsoft.Compute/virtualMachines/', variables('hcVmName'))]"
      ],
      "properties":{
        "publisher":"Microsoft.OSTCExtensions",
        "type":"CustomScriptForLinux",
        "typeHandlerVersion":"1.4",
        "autoUpgradeMinorVersion": true,
        "settings":{
          "fileUris":[
            "[variables('customScriptDeployUrl')]",
            "[variables('ansiblePlaybookUrl')]",
            "[variables('ansibleRolesReqUrl')]",
            "[variables('ansibleVarsUrl')]",
            "[variables('pythonAzureScriptUrl')]",
            "[variables('ansibleVarsMastersUrl')]",
            "[variables('ansibleVarsSlavesUrl')]",
            "[variables('ansibleVarsDefaultsUrl')]"
          ]
        },
        "protectedSettings":{
           "commandToExecute":"[concat(variables('customScriptAnsibleCommand'),' ', variables('keyStorageAccountName'),' ',listKeys(concat('Microsoft.Storage/storageAccounts/', variables('keyStorageAccountName')), '2015-05-01-preview').key1,' ',variables('paramsDeploy'))]"
        }
      }
    },
    {
      "comments":"Ansible Contol VM plays the playbook to provision the LAMP cluster",
      "apiVersion":"[variables('apiVersion').compute]",
      "type":"Microsoft.Compute/virtualMachines",
      "name":"[variables('hcVmName')]",
      "location":"[variables('location')]",
      "dependsOn":[
        "[concat('Microsoft.Storage/storageAccounts/', toLower(variables('hcStorageAccountName')) ) ]",
        "[concat('Microsoft.Storage/storageAccounts/', toLower(variables('keyStorageAccountName')) )]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('hcNicName'))]"
      ],
      "properties":{
        "hardwareProfile":{
          "vmSize":"[variables('hcVmSize')]"
        },
        "osProfile": "[variables(concat('osProfile_hc_', parameters('authenticationType')))]",
        "storageProfile":{
          "imageReference":{
            "publisher":"[variables('imagePublisher')]",
            "offer":"[variables('imageOffer')]",
            "sku":"[parameters('ubuntuOSVersion')]",
            "version":"latest"
          },
          "osDisk":{
            "name":"osdisk",
            "vhd":{
              "uri":"[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('hcStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('hcVmStorageAccountContainerName'),'/', variables('hcOSDiskName'), '.vhd')]"
            },
            "caching":"ReadWrite",
            "createOption":"FromImage"
          }
        },
        "networkProfile":{
          "networkInterfaces":[
            {
              "id":"[resourceId('Microsoft.Network/networkInterfaces',variables('hcNicName'))]"
            }
          ]
        },
        "diagnosticsProfile":{
          "bootDiagnostics":{
            "enabled":"true",
            "storageUri":"[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('hcStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob)]"
          }
        }
      }
    }
  ],
  "outputs": {
    "Ansible FQDN": {
      "value": "[concat(variables('dnsNameForAnsiblePublicIP'),'.',variables('location'),'.cloudapp.azure.com')]",
      "type": "string" 
    },
    "SHOP FQDN": {
      "value": "[concat(variables('dnsNameForFrontPublicIP'),'.',variables('location'),'cloudapp.azure.com')]",
      "type": "string" 
    }
  }
}